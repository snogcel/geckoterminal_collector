From 3edafb684c8636a25d08994b552ae90340b3dbee Mon Sep 17 00:00:00 2001
From: Jon Kindel <ledniknoj@gmail.com>
Date: Wed, 10 Sep 2025 04:12:02 -0600
Subject: [PATCH] revert changes to dex_monitoring.py (TODO align with test
 coverage)

---
 .../collectors/dex_monitoring.py                 | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/gecko_terminal_collector/collectors/dex_monitoring.py b/gecko_terminal_collector/collectors/dex_monitoring.py
index 8c9d3ec..9fcb763 100644
--- a/gecko_terminal_collector/collectors/dex_monitoring.py
+++ b/gecko_terminal_collector/collectors/dex_monitoring.py
@@ -87,11 +87,16 @@ async def collect(self) -> CollectionResult:
             # Transform to dict
 
 
-            # response_to_dict = dex_data.to_dict(orient='records')
+            response_to_dict = dex_data.to_dict(orient='records')
             # response_to_dict = dex_data.fromkeys()
 
             # Validate the data
-            validation_result = await self.validate_data(dex_data)
+            
+            # For Test Coverage
+            # validation_result = await self.validate_data(dex_data)
+
+
+            validation_result = await self.validate_data(response_to_dict)
             if not validation_result.is_valid:
                 errors.extend(validation_result.errors)
                 logger.error(f"DEX data validation failed: {validation_result.errors}")
@@ -103,7 +108,8 @@ async def collect(self) -> CollectionResult:
                     logger.warning(f"DEX data validation warning: {warning}")
             
             # Process and store DEX data
-            dex_records = self._process_dex_data(dex_data)
+            #dex_records = self._process_dex_data(dex_data)
+            dex_records = self._process_dex_data(response_to_dict)
             stored_count = await self._store_dex_data(dex_records)
             records_collected = stored_count
             
@@ -169,13 +175,13 @@ async def _validate_specific_data(self, data: Any) -> Optional[ValidationResult]
                 warnings.append(f"DEX entry {i} has unexpected type: {dex['type']}")
             
             print("-_validate_specific_data--")
-            print(dex["attributes"])
+            #print(dex["attributes"])
             print("---")
 
             # Check attributes            
             if not isinstance(dex, dict):
                 errors.append(f"DEX entry {i} attributes must be a dictionary")
-            elif "name" not in dex["attributes"]:
+            elif "name" not in dex:
                 errors.append(f"DEX entry {i} missing required 'name' in attributes")
         
         return ValidationResult(len(errors) == 0, errors, warnings)
