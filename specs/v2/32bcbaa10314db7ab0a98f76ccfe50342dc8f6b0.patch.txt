From 32bcbaa10314db7ab0a98f76ccfe50342dc8f6b0 Mon Sep 17 00:00:00 2001
From: Jon Kindel <ledniknoj@gmail.com>
Date: Fri, 5 Sep 2025 11:58:21 -0600
Subject: [PATCH] Fix cli_with_scheduler (WIP)

---
 examples/cli_with_scheduler.py               | 28 +++++++++++++++++++-
 gecko_terminal_collector/database/manager.py | 19 +++++++++++--
 2 files changed, 44 insertions(+), 3 deletions(-)

diff --git a/examples/cli_with_scheduler.py b/examples/cli_with_scheduler.py
index 6dd5126..2db71f4 100644
--- a/examples/cli_with_scheduler.py
+++ b/examples/cli_with_scheduler.py
@@ -17,6 +17,7 @@
 from gecko_terminal_collector.config.models import CollectionConfig
 from gecko_terminal_collector.config.manager import ConfigManager
 from gecko_terminal_collector.scheduling.scheduler import CollectionScheduler, SchedulerConfig
+from gecko_terminal_collector.database.sqlalchemy_manager import SQLAlchemyDatabaseManager
 from gecko_terminal_collector.database.manager import DatabaseManager
 from gecko_terminal_collector.utils.metadata import MetadataTracker
 
@@ -76,7 +77,18 @@ async def initialize(self, use_mock: bool = False):
         metadata_tracker = MetadataTracker()
         
         # Create database manager
-        self.db_manager = DatabaseManager(config.database)
+        print("---")
+        print(config.database)
+        print("---")
+
+        # raise SystemExit()
+
+        #self.db_manager = DatabaseManager(config.database)
+        # self.db_manager = DatabaseManager()
+        
+        # raise SystemExit()
+        
+        self.db_manager = SQLAlchemyDatabaseManager(config.database)
         await self.db_manager.initialize()
         
         # Create scheduler
@@ -302,9 +314,23 @@ async def run_collector():
         # Find the collector job ID
         collectors = scheduler_cli.scheduler.list_collectors()
         target_job_id = None
+
+        print("-run_collector--")
+        print(collectors)
+        print("---")
         
         for job_id in collectors:
             collector_status = scheduler_cli.scheduler.get_collector_status(job_id)
+            collector = job_id.removeprefix("collector_")
+
+            print("-collector_status--")
+            print("job_id: ", job_id)
+            print("collector: ", collector)
+            print("collector_key: ", collector_status['collector_key'])
+            print("---")
+
+            print(collector_status['collector_key'])
+
             if collector_status and collector in collector_status['collector_key']:
                 target_job_id = job_id
                 break
diff --git a/gecko_terminal_collector/database/manager.py b/gecko_terminal_collector/database/manager.py
index 7e4a53f..7974270 100644
--- a/gecko_terminal_collector/database/manager.py
+++ b/gecko_terminal_collector/database/manager.py
@@ -157,7 +157,12 @@ async def get_watchlist_entry_by_pool_id(self, pool_id: str) -> Optional[Any]:
     async def update_watchlist_entry_status(self, pool_id: str, is_active: bool) -> None:
         """Update the active status of a watchlist entry."""
         pass
-    
+
+    @abstractmethod
+    async def update_watchlist_entry(self, entry: Any) -> None:
+        """Update an existing watchlist entry."""
+        pass
+
     @abstractmethod
     async def get_watchlist_pools(self) -> List[str]:
         """Get all active watchlist pool IDs."""
@@ -289,7 +294,17 @@ async def cleanup_old_data(self, days_to_keep: int = 90) -> Dict[str, int]:
             Dictionary with cleanup statistics
         """
         pass
-    
+
+    @abstractmethod
+    async def get_table_names(self) -> List[Any]:
+        """Get list of existing table names in the database."""
+        pass
+
+    @abstractmethod
+    async def count_records(self, table_name: str) -> int:
+        """Count records in a specific table."""
+        pass
+
     def _calculate_expected_intervals(
         self, 
         start: datetime, 
