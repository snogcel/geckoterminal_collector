From 0959e0360e7449b85adf687a3d4f0ae6877b8a1d Mon Sep 17 00:00:00 2001
From: Jon Kindel <ledniknoj@gmail.com>
Date: Fri, 5 Sep 2025 05:17:25 -0600
Subject: [PATCH] Fix dex_monitoring collector

---
 .../collectors/dex_monitoring.py                   | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/gecko_terminal_collector/collectors/dex_monitoring.py b/gecko_terminal_collector/collectors/dex_monitoring.py
index e4103d5..5a2be7a 100644
--- a/gecko_terminal_collector/collectors/dex_monitoring.py
+++ b/gecko_terminal_collector/collectors/dex_monitoring.py
@@ -74,8 +74,11 @@ async def collect(self) -> CollectionResult:
                 logger.warning(error_msg)
                 return self.create_failure_result(errors, records_collected, start_time)
             
+            # Transform to dict
+            response_to_dict = dex_data.to_dict(orient='records')
+
             # Validate the data
-            validation_result = await self.validate_data(dex_data)
+            validation_result = await self.validate_data(response_to_dict)
             if not validation_result.is_valid:
                 errors.extend(validation_result.errors)
                 logger.error(f"DEX data validation failed: {validation_result.errors}")
@@ -87,7 +90,7 @@ async def collect(self) -> CollectionResult:
                     logger.warning(f"DEX data validation warning: {warning}")
             
             # Process and store DEX data
-            dex_records = self._process_dex_data(dex_data)
+            dex_records = self._process_dex_data(response_to_dict)
             stored_count = await self._store_dex_data(dex_records)
             records_collected = stored_count
             
@@ -152,11 +155,10 @@ async def _validate_specific_data(self, data: Any) -> Optional[ValidationResult]
             elif dex["type"] != "dex":
                 warnings.append(f"DEX entry {i} has unexpected type: {dex['type']}")
             
-            # Check attributes
-            attributes = dex.get("attributes", {})
-            if not isinstance(attributes, dict):
+            # Check attributes            
+            if not isinstance(dex, dict):
                 errors.append(f"DEX entry {i} attributes must be a dictionary")
-            elif "name" not in attributes:
+            elif "name" not in dex:
                 errors.append(f"DEX entry {i} missing required 'name' in attributes")
         
         return ValidationResult(len(errors) == 0, errors, warnings)
